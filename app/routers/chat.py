"""
Router pour l'interface chat MCP avec int√©gration OpenAI + Haloscan
"""
import json
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel, Field
from openai import AsyncOpenAI

from ..config import Config
from ..dependencies import get_haloscan_client, HaloscanClient
from ..logging_config import get_logger
from ..mcp_tools.registry import global_mcp_registry
from ..services.chunking_service import chunking_service, ChunkProcessor

logger = get_logger("chat")
router = APIRouter(tags=["chat"])

# Configuration OpenAI
openai_client = AsyncOpenAI(api_key=Config.OPENAI_API_KEY)

class ChatMessage(BaseModel):
    """Mod√®le pour un message de chat"""
    role: str = Field(..., description="R√¥le du message: user, assistant, system")
    content: str = Field(..., description="Contenu du message")

class ChatRequest(BaseModel):
    """Mod√®le pour une requ√™te de chat"""
    message: str = Field(..., description="Message de l'utilisateur")
    conversation_history: List[ChatMessage] = Field(default=[], description="Historique de conversation")

class ChatResponse(BaseModel):
    """Mod√®le pour une r√©ponse de chat"""
    response: str = Field(..., description="R√©ponse de l'assistant")
    tools_used: List[Dict[str, Any]] = Field(default=[], description="Outils utilis√©s")
    conversation_history: List[ChatMessage] = Field(..., description="Historique mis √† jour")

# Initialisation du registre MCP modulaire
def analyze_message_intent(message: str) -> List[str]:
    """Analyse le message utilisateur pour d√©terminer quels outils sont n√©cessaires"""
    message_lower = message.lower()
    needed_tools = []
    
    # Mots-cl√©s et analyse de mots-cl√©s
    if any(keyword in message_lower for keyword in ['mot-cl√©', 'keyword', 'analyse', 'recherche mot', 'seo']):
        needed_tools.extend(['analyze_keyword', 'find_similar_keywords', 'keywords_overview'])
    
    # Domaines et concurrents
    if any(keyword in message_lower for keyword in ['domaine', 'domain', 'concurrent', 'competitor', 'site']):
        needed_tools.extend(['analyze_domain', 'domains_overview', 'find_domain_competitors'])
    
    # Positions et classements
    if any(keyword in message_lower for keyword in ['position', 'classement', 'page 2', 'top 10', 'serp']):
        needed_tools.extend(['search_keywords_by_position', 'domains_positions'])
    
    # Analyse concurrentielle avanc√©e
    if any(keyword in message_lower for keyword in ['diff√©rence', '√©cart', 'comparaison', 'vs']):
        needed_tools.extend(['domains_competitors_keywords_diff'])
    
    # Cr√©dits
    if any(keyword in message_lower for keyword in ['cr√©dit', 'credit', 'solde', 'compte']):
        needed_tools.append('get_user_credits')
    
    # Historique et tendances
    if any(keyword in message_lower for keyword in ['historique', '√©volution', 'tendance', 'temps']):
        needed_tools.extend(['domains_history_positions', 'domains_visibility_trends'])
    
    # Backlinks et GMB
    if any(keyword in message_lower for keyword in ['backlink', 'lien', 'gmb', 'google my business']):
        needed_tools.extend(['domains_gmb_backlinks'])
    
    # Toujours inclure les outils de base
    base_tools = ['get_user_credits']
    needed_tools.extend(base_tools)
    
    # Supprimer les doublons
    return list(set(needed_tools))

def get_haloscan_tools(client: HaloscanClient, message: str = "") -> List[Dict[str, Any]]:
    """R√©cup√®re dynamiquement les outils Haloscan pertinents selon le message"""
    # Enregistrer les outils Haloscan si pas d√©j√† fait
    if "haloscan" not in global_mcp_registry.registries:
        global_mcp_registry.register_haloscan_tools(client)
    
    # Analyser le message pour d√©terminer les outils n√©cessaires
    needed_tool_names = analyze_message_intent(message)
    
    # R√©cup√©rer toutes les d√©finitions et filtrer selon les besoins
    all_tools = global_mcp_registry.get_all_tool_definitions()
    filtered_tools = []
    
    for tool in all_tools:
        tool_name = tool.get("function", {}).get("name", "")
        if tool_name in needed_tool_names:
            filtered_tools.append(tool)
    
    logger.info(f"üéØ Outils s√©lectionn√©s pour le message: {len(filtered_tools)} sur {len(all_tools)} disponibles")
    logger.info(f"üìã Outils: {[tool.get('function', {}).get('name', '') for tool in filtered_tools]}")
    
    return filtered_tools

async def execute_haloscan_tool(tool_name: str, arguments: Dict[str, Any], client: HaloscanClient) -> Dict[str, Any]:
    """Ex√©cute un outil Haloscan via le registre modulaire"""
    logger.info(f"üîß D√âBUT Ex√©cution de l'outil modulaire: {tool_name}")
    logger.info(f"üìù Arguments re√ßus: {json.dumps(arguments, indent=2, ensure_ascii=False)}")
    
    # Enregistrer les outils Haloscan si pas d√©j√† fait
    if "haloscan" not in global_mcp_registry.registries:
        logger.info(f"üîÑ Initialisation du registre Haloscan...")
        global_mcp_registry.register_haloscan_tools(client)
        logger.info(f"‚úÖ Registre Haloscan initialis√© avec {len(global_mcp_registry.list_all_tools())} outils")
    
    # Ex√©cuter l'outil via le registre modulaire
    return await global_mcp_registry.execute_tool(tool_name, arguments)

@router.post("/chat", response_model=ChatResponse)
async def chat_with_mcp(
    request: ChatRequest,
    client: HaloscanClient = Depends(get_haloscan_client)
) -> ChatResponse:
    """
    ü§ñ Interface chat MCP : Conversation avec OpenAI + outils Haloscan
    
    L'assistant peut automatiquement utiliser les outils Haloscan selon le contexte :
    - Analyse de mots-cl√©s
    - Analyse de domaines
    - Recherche de concurrents
    - Recherche avanc√©e par position
    - Et plus encore !
    """
    # Log simplifi√© - Format minimal et clean
    query_short = request.message[:50] + "..." if len(request.message) > 50 else request.message
    logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] CHAT: Nouvelle requ√™te ‚Üí \"{query_short}\"")
    
    try:
        # Construire l'historique de conversation
        messages = []
        
        # Message syst√®me pour d√©finir le comportement de l'assistant
        system_message = {
            "role": "system",
            "content": """Tu es un assistant SEO expert qui utilise OBLIGATOIREMENT les outils Haloscan pour r√©pondre aux questions.

Tu as acc√®s aux outils suivants :
- analyze_keyword : Analyse compl√®te d'un mot-cl√© (volume, difficult√©, SERP, etc.)
- find_similar_keywords : Trouve des mots-cl√©s similaires et suggestions
- analyze_domain : Analyse d'un domaine (trafic, autorit√©, mots-cl√©s)
- find_domain_competitors : Trouve les concurrents d'un domaine
- search_keywords_by_position : Recherche avanc√©e par plage de positions (ESSENTIEL pour page 2 = positions 11-20)
- get_user_credits : V√©rifie les cr√©dits disponibles

R√àGLES IMPORTANTES :
1. Tu DOIS utiliser les outils appropri√©s pour chaque demande
2. Pour "page 2" ou "positions 11-20", utilise OBLIGATOIREMENT search_keywords_by_position avec position_min=11, position_max=20
3. Pour "page 1" ou "top 10", utilise search_keywords_by_position avec position_min=1, position_max=10
4. Si l'utilisateur demande une analyse de domaine ET des positions sp√©cifiques, utilise PLUSIEURS outils en s√©quence
5. IMPORTANT: Quand tu utilises des outils, tu re√ßois leurs r√©sultats. Tu DOIS analyser et utiliser ces r√©sultats dans ta r√©ponse.
6. Ne dis JAMAIS que tu ne peux pas acc√©der aux outils - si tu les appelles, tu as acc√®s √† leurs r√©sultats.
7. Explique toujours pourquoi tu utilises chaque outil et interpr√®te les r√©sultats obtenus.

Ne r√©ponds JAMAIS sans avoir utilis√© les outils appropri√©s et analys√© leurs r√©sultats."""
        }
        messages.append(system_message)
        
        # Ajouter l'historique de conversation
        for msg in request.conversation_history:
            messages.append({
                "role": msg.role,
                "content": msg.content
            })
        
        # Ajouter le nouveau message utilisateur
        messages.append({
            "role": "user",
            "content": request.message
        })
        
        # Premi√®re requ√™te √† OpenAI avec les outils disponibles
        logger.info("ü§ñ Envoi de la requ√™te √† OpenAI avec outils MCP")
        
        # Forcer l'utilisation d'outils pour certaines requ√™tes
        tool_choice = "auto"
        if any(keyword in request.message.lower() for keyword in ["page 2", "position", "11-20", "positions 11"]):
            # Forcer l'utilisation d'outils pour les requ√™tes de position
            tool_choice = "required"
        
        # R√©cup√©rer les outils dynamiquement depuis le registre modulaire
        haloscan_tools = get_haloscan_tools(client, request.message)
        logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] TOOLS: S√©lection ‚Üí {len(haloscan_tools)}/32 outils")
        
        response = await openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            tools=haloscan_tools,
            tool_choice=tool_choice,
            temperature=0.7,
            max_tokens=1500  # R√©duit pour laisser plus de place au contexte
        )
        
        assistant_message = response.choices[0].message
        tools_used = []
        
        # Traiter les appels d'outils si n√©cessaire
        if assistant_message.tool_calls:
            # Log simplifi√© des outils utilis√©s
            tool_names = [tc.function.name for tc in assistant_message.tool_calls]
            logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] TOOLS: Ex√©cution ‚Üí {', '.join(tool_names)}")
            
            # Ajouter le message de l'assistant avec les tool_calls
            messages.append({
                "role": "assistant",
                "content": assistant_message.content,
                "tool_calls": [
                    {
                        "id": tool_call.id,
                        "type": tool_call.type,
                        "function": {
                            "name": tool_call.function.name,
                            "arguments": tool_call.function.arguments
                        }
                    }
                    for tool_call in assistant_message.tool_calls
                ]
            })
            
            # Ex√©cuter chaque outil
            for tool_call in assistant_message.tool_calls:
                function_name = tool_call.function.name
                function_args = json.loads(tool_call.function.arguments)
                
                # Ex√©cuter l'outil Haloscan
                tool_result = await execute_haloscan_tool(function_name, function_args, client)
                tools_used.append(tool_result)
                
                # Log simplifi√© du r√©sultat
                status = "‚úÖ" if tool_result.get('success', False) else "‚ùå"
                result_info = ""
                if tool_result.get('success'):
                    data = tool_result.get('data', {})
                    if isinstance(data, dict):
                        if 'keywords_found' in data:
                            result_info = f" {data['keywords_found']} r√©sultats"
                        elif 'competitors' in data:
                            result_info = f" {len(data.get('competitors', []))} concurrents"
                        elif 'total_keywords' in data:
                            result_info = f" {data['total_keywords']} mots-cl√©s"
                logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] API: {function_name} ‚Üí {status}{result_info}")
                
                # Ajouter le r√©sultat de l'outil aux messages
                messages.append({
                    "role": "tool",
                    "tool_call_id": tool_call.id,
                    "content": json.dumps(tool_result, ensure_ascii=False)
                })
            
            # V√©rifier si d'autres outils sont n√©cessaires
            needs_more_tools = False
            if any(keyword in request.message.lower() for keyword in ["page 2", "positions 11-20", "business centric"]):
                # V√©rifier si search_keywords_by_position a √©t√© utilis√©
                position_tool_used = any(tool["tool"] == "search_keywords_by_position" for tool in tools_used)
                if not position_tool_used:
                    logger.info("üéØ Requ√™te de position d√©tect√©e mais outil position non utilis√© - Ajout d'un message de guidage")
                    
                    # Ajouter un message pour guider l'assistant
                    guidance_message = {
                        "role": "user",
                        "content": "Maintenant, utilise l'outil search_keywords_by_position pour trouver les mots-cl√©s en page 2 (positions 11-20) pour ce domaine."
                    }
                    messages.append(guidance_message)
                    
                    # Nouvelle requ√™te avec guidage
                    guided_response = await openai_client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=messages,
                        tools=haloscan_tools,
                        tool_choice="required",
                        temperature=0.7,
                        max_tokens=2000
                    )
                    
                    # Traiter les nouveaux outils si n√©cessaire
                    if guided_response.choices[0].message.tool_calls:
                        logger.info(f"üîß L'assistant utilise maintenant {len(guided_response.choices[0].message.tool_calls)} outil(s) suppl√©mentaire(s)")
                        
                        # Ajouter le message de l'assistant avec les nouveaux tool_calls
                        messages.append({
                            "role": "assistant",
                            "content": guided_response.choices[0].message.content,
                            "tool_calls": [
                                {
                                    "id": tool_call.id,
                                    "type": tool_call.type,
                                    "function": {
                                        "name": tool_call.function.name,
                                        "arguments": tool_call.function.arguments
                                    }
                                }
                                for tool_call in guided_response.choices[0].message.tool_calls
                            ]
                        })
                        
                        # Ex√©cuter les nouveaux outils
                        for tool_call in guided_response.choices[0].message.tool_calls:
                            function_name = tool_call.function.name
                            function_args = json.loads(tool_call.function.arguments)
                            
                            logger.info(f"üîß Ex√©cution suppl√©mentaire de {function_name} avec {function_args}")
                            
                            # Ex√©cuter l'outil Haloscan
                            tool_result = await execute_haloscan_tool(function_name, function_args, client)
                            tools_used.append(tool_result)
                            
                            # Ajouter le r√©sultat de l'outil aux messages
                            messages.append({
                                "role": "tool",
                                "tool_call_id": tool_call.id,
                                "content": json.dumps(tool_result, ensure_ascii=False)
                            })
            
            # Deuxi√®me requ√™te √† OpenAI avec les r√©sultats des outils
            
            final_response = await openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                temperature=0.7,
                max_tokens=2000
            )
            
            final_content = final_response.choices[0].message.content
        else:
            final_content = assistant_message.content
        
        # Construire l'historique mis √† jour
        updated_history = []
        for msg in request.conversation_history:
            updated_history.append(msg)
        
        # Ajouter le message utilisateur
        updated_history.append(ChatMessage(role="user", content=request.message))
        
        # Ajouter la r√©ponse de l'assistant
        updated_history.append(ChatMessage(role="assistant", content=final_content))
        
        # Log final simplifi√©
        logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] RESPONSE: ‚úÖ R√©ponse g√©n√©r√©e ({len(tools_used)} outils utilis√©s)")
        
        return ChatResponse(
            response=final_content,
            tools_used=tools_used,
            conversation_history=updated_history
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chat MCP: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du chat: {str(e)}")

@router.get("/chat/tools")
async def list_available_tools(
    client: HaloscanClient = Depends(get_haloscan_client)
) -> Dict[str, Any]:
    """
    üìã Liste tous les outils MCP disponibles pour le chat
    """
    # R√©cup√©rer tous les outils disponibles
    all_tools = get_haloscan_tools(client, "")
    
    return {
        "tools": all_tools,
        "description": "Outils Haloscan disponibles pour l'assistant IA (s√©lection dynamique selon le message)",
        "total_tools": len(all_tools),
        "note": "Les outils sont s√©lectionn√©s dynamiquement selon le contenu du message utilisateur"
    }
